A folder can be promoted to a Theme Centre by calling a view.

  >>> from Products.ATContentTypes.content.folder import ATFolder
  >>> from Products.CMFCore.utils import getToolByName
  >>> from eea.themecentre.interfaces import IThemeTagging
  >>> from eea.themecentre.interfaces import IThemeCentreSchema
  >>> from eea.themecentre.browser.themecentre import PromoteThemeCentre
  >>> from zope.app.component.hooks import setSite
  >>> setSite(self.portal)

  >>> folder = self.portal.to_be_promoted
  >>> view = folder.unrestrictedTraverse('@@promote2ThemeCentre')
  >>> view()
  '...'

Let's associate the Theme Centre with a theme.

  >>> themeCentre = folder
  >>> taggingadapter = IThemeCentreSchema(themeCentre)
  >>> taggingadapter.tags = 'air'

When a folder is promoted to a Theme Centre news, links and events folders
should be created. Let's see if that worked.

  >>> getattr(themeCentre, 'highlights', None) is not None
  True
  >>> getattr(themeCentre, 'events', None) is not None
  True
  >>> getattr(themeCentre, 'faq', None) is not None
  True

When an object is created inside a Theme Centre, the object should be
tagged with the themes associated with the Theme Centre.

  >>> self.createObject(themeCentre.highlights, 'News Item', 'newsobj')
  >>> themeadapter = IThemeTagging(themeCentre.highlights.newsobj)
  >>> themeadapter.tags
  ['air', 'air_quality']

An object should always have its themecentre as a tag, so even if the
user removes it it should be added again automatically.

  >>> themeadapter.tags = []
  >>> themeadapter.tags
  ['air', 'air_quality']

The object still has just one main theme.

  >>> from eea.themecentre.interfaces import IMainThemeTagging
  >>> IMainThemeTagging(themeCentre.highlights.newsobj).tags
  ['air']

A theme can be related to other themes. To tell what themes this theme
is related to, we adapt themecentre to IThemeRelation. In real cases
the themes should be real UIDs, but here we can use random strings.

  >>> from eea.themecentre.interfaces import IThemeRelation
  >>> relation = IThemeRelation(themeCentre)
  >>> relation.related = ['5j45j34', '1sloe45']
  >>> relation.related
  ['5j45j34', '1sloe45']

There's a theme vocabulary that lists all existing theme centres. Until
now we only created on theme centre. The theme vocabulary won't list the
theme that is associated with the current theme, so let's make a new
theme centre.

  >>> folder = self.portal.to_be_promoted2
  >>> view = PromoteThemeCentre(folder, self.portal.REQUEST)
  >>> view()
  '...'
  >>> themeCentre2 = folder
  >>> taggingadapter = IThemeCentreSchema(themeCentre2)
  >>> taggingadapter.tags = 'agriculture'

Now with context being the 'air' theme, the vocabulary should return only
the 'agriculture' theme centre.

  >>> from eea.themecentre.vocabulary import ThemeCentresVocabularyFactory
  >>> class Adapted(object): pass
  >>> adapted = Adapted()
  >>> adapted.context = themeCentre
  >>> vocab = ThemeCentresVocabularyFactory(adapted)
  >>> [ term.value for term in vocab ] == [ themeCentre2.UID() ]
  True


Modify portal content should be enough for accessing the themes tab.

  >>> self.setRoles(['Member'])
  >>> mtool = getToolByName(self.portal, 'portal_membership')
  >>> self.portal.to_be_promoted.manage_permission('Modify portal content', roles=['Member'])
  >>> self.portal.to_be_promoted.unrestrictedTraverse('themes_edit.html')()
  u'...'
